import React, { useState, useEffect } from 'react'
import { Link, useSearchParams, useNavigate } from 'react-router-dom'
import { useTranslation } from 'react-i18next'
import { ROUTES } from '@constants/routes'
import './ResetPassword.scss'

interface FormData {
  newPassword: string
  confirmPassword: string
}

interface FormErrors {
  newPassword?: string
  confirmPassword?: string
  general?: string
}

export const ResetPassword: React.FC = () => {
  const { t } = useTranslation()
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()
  
  const [formData, setFormData] = useState<FormData>({
    newPassword: '',
    confirmPassword: ''
  })

  const [errors, setErrors] = useState<FormErrors>({})
  const [isLoading, setIsLoading] = useState(false)
  const [showPasswords, setShowPasswords] = useState({
    new: false,
    confirm: false
  })
  const [passwordStrength, setPasswordStrength] = useState({
    score: 0,
    feedback: ''
  })
  const [tokenValid, setTokenValid] = useState<boolean | null>(null)
  const [resetComplete, setResetComplete] = useState(false)

  const token = searchParams.get('token')
  const email = searchParams.get('email')

  useEffect(() => {
    window.scrollTo(0, 0)
    validateResetToken()
  }, [])

  const validateResetToken = async () => {
    if (!token || !email) {
      setTokenValid(false)
      return
    }

    try {
      // Simulate API call to validate token
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Simulate random token validity (80% valid)
      const isValid = Math.random() > 0.2
      setTokenValid(isValid)
      
      if (!isValid) {
        setErrors({
          general: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞'
        })
      }
    } catch (error) {
      setTokenValid(false)
      setErrors({
        general: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è'
      })
    }
  }

  const validatePasswordStrength = (password: string) => {
    let score = 0
    let feedback = ''

    if (password.length >= 8) score += 1
    if (/[a-z]/.test(password)) score += 1
    if (/[A-Z]/.test(password)) score += 1
    if (/\d/.test(password)) score += 1
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) score += 1

    switch (score) {
      case 0:
      case 1:
        feedback = '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 2:
        feedback = '–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 3:
        feedback = '–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å'
        break
      case 4:
        feedback = '–°–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 5:
        feedback = '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        break
    }

    return { score, feedback }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))

    // Clear specific field error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }))
    }

    // Update password strength for new password
    if (name === 'newPassword') {
      setPasswordStrength(validatePasswordStrength(value))
    }
  }

  const togglePasswordVisibility = (field: 'new' | 'confirm') => {
    setShowPasswords(prev => ({
      ...prev,
      [field]: !prev[field]
    }))
  }

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {}

    // New password validation
    if (!formData.newPassword) {
      newErrors.newPassword = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
    } else if (formData.newPassword.length < 8) {
      newErrors.newPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
    } else if (formData.newPassword !== formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
    }

    // Password strength check
    if (formData.newPassword && passwordStrength.score < 3) {
      newErrors.newPassword = '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setIsLoading(true)

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Simulate random server error (10% chance)
      if (Math.random() < 0.1) {
        throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è')
      }

      setResetComplete(true)
      
      // Auto redirect after 3 seconds
      setTimeout(() => {
        navigate(ROUTES.LOGIN)
      }, 3000)
      
    } catch (error) {
      setErrors({
        general: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è'
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getPasswordStrengthColor = (score: number) => {
    switch (score) {
      case 0:
      case 1: return '#e74c3c'
      case 2: return '#f39c12'
      case 3: return '#f1c40f'
      case 4: return '#27ae60'
      case 5: return '#2ecc71'
      default: return '#bdc3c7'
    }
  }

  const passwordRequirements = [
    { text: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤', met: formData.newPassword.length >= 8 },
    { text: '–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (a-z)', met: /[a-z]/.test(formData.newPassword) },
    { text: '–ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ (A-Z)', met: /[A-Z]/.test(formData.newPassword) },
    { text: '–¶–∏—Ñ—Ä–∞ (0-9)', met: /\d/.test(formData.newPassword) },
    { text: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!@#$...)', met: /[!@#$%^&*(),.?":{}|<>]/.test(formData.newPassword) }
  ]

  // Loading state while validating token
  if (tokenValid === null) {
    return (
      <div className="reset-password-page">
        <div className="container">
          <div className="reset-password-content">
            <div className="validation-loading">
              <div className="spinner"></div>
              <h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞</h2>
              <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Invalid token state
  if (!tokenValid) {
    return (
      <div className="reset-password-page">
        <div className="container">
          <div className="reset-password-content">
            <div className="invalid-token">
              <div className="error-icon">‚ö†Ô∏è</div>
              <h2>–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</h2>
              <p>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.</p>
              <div className="error-actions">
                <Link to={ROUTES.FORGOT_PASSWORD} className="retry-btn">
                  –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
                </Link>
                <Link to={ROUTES.LOGIN} className="login-btn">
                  –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Success state
  if (resetComplete) {
    return (
      <div className="reset-password-page">
        <div className="container">
          <div className="reset-password-content">
            <div className="reset-success">
              <div className="success-icon">‚úÖ</div>
              <h2>–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</h2>
              <p>–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.</p>
              <div className="success-actions">
                <Link to={ROUTES.LOGIN} className="login-btn">
                  –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
                </Link>
              </div>
              <div className="auto-redirect">
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="reset-password-page">
      <div className="container">
        <div className="reset-password-content">
          <div className="form-section">
            <div className="form-header">
              <div className="header-icon">üîê</div>
              <div>
                <h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è</h2>
                <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ <strong>{email}</strong></p>
              </div>
            </div>

            {errors.general && (
              <div className="error-message">
                <span className="error-icon">‚ùå</span>
                {errors.general}
              </div>
            )}

            <form onSubmit={handleSubmit} className="reset-form">
              <div className="form-group">
                <label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                <div className="password-input-wrapper">
                  <input
                    type={showPasswords.new ? 'text' : 'password'}
                    id="newPassword"
                    name="newPassword"
                    value={formData.newPassword}
                    onChange={handleInputChange}
                    className={errors.newPassword ? 'error' : ''}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => togglePasswordVisibility('new')}
                    tabIndex={-1}
                  >
                    {showPasswords.new ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.newPassword && (
                  <span className="field-error">{errors.newPassword}</span>
                )}
                
                {formData.newPassword && (
                  <div className="password-strength">
                    <div className="strength-bar">
                      <div 
                        className="strength-fill"
                        style={{ 
                          width: `${(passwordStrength.score / 5) * 100}%`,
                          backgroundColor: getPasswordStrengthColor(passwordStrength.score)
                        }}
                      />
                    </div>
                    <span 
                      className="strength-text"
                      style={{ color: getPasswordStrengthColor(passwordStrength.score) }}
                    >
                      {passwordStrength.feedback}
                    </span>
                  </div>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                <div className="password-input-wrapper">
                  <input
                    type={showPasswords.confirm ? 'text' : 'password'}
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    className={errors.confirmPassword ? 'error' : ''}
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => togglePasswordVisibility('confirm')}
                    tabIndex={-1}
                  >
                    {showPasswords.confirm ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.confirmPassword && (
                  <span className="field-error">{errors.confirmPassword}</span>
                )}
                
                {formData.confirmPassword && formData.newPassword === formData.confirmPassword && (
                  <span className="success-text">‚úì –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç</span>
                )}
              </div>

              <div className="form-actions">
                <Link to={ROUTES.LOGIN} className="cancel-btn">
                  –û—Ç–º–µ–Ω–∞
                </Link>
                <button 
                  type="submit" 
                  className="submit-btn"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <span className="spinner"></span>
                      –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                    </>
                  ) : (
                    'üîê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'
                  )}
                </button>
              </div>
            </form>
          </div>

          <div className="requirements-section">
            <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é</h3>
            <div className="requirements-list">
              {passwordRequirements.map((req, index) => (
                <div 
                  key={index}
                  className={`requirement ${req.met ? 'met' : 'not-met'}`}
                >
                  <span className="requirement-icon">
                    {req.met ? '‚úÖ' : '‚≠ï'}
                  </span>
                  <span className="requirement-text">{req.text}</span>
                </div>
              ))}
            </div>

            <div className="security-tips">
              <h4>üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h4>
              <ul>
                <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞—Ä–æ–ª–µ</li>
                <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤</li>
                <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å (—Ä–∞–∑ –≤ 3-6 –º–µ—Å—è—Ü–µ–≤)</li>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π</li>
              </ul>
            </div>

            <div className="two-factor-promo">
              <div className="promo-content">
                <h4>üõ°Ô∏è –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
                <p>–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã</p>
              </div>
            </div>

            <div className="help-links">
              <h4>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h4>
              <Link to={ROUTES.CONTACT_US} className="help-link">
                üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
              </Link>
              <Link to="/faq" className="help-link">
                ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}