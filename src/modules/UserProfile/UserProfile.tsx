import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { ROUTES } from '@constants/routes'
import './UserProfile.scss'

interface UserData {
  id: string
  firstName: string
  lastName: string
  email: string
  phone: string
  birthDate: string
  gender: 'male' | 'female' | 'other' | ''
  avatar: string
  joinDate: string
  emailVerified: boolean
  phoneVerified: boolean
  notifications: {
    email: boolean
    sms: boolean
    push: boolean
    marketing: boolean
  }
  security: {
    twoFactorEnabled: boolean
    lastPasswordChange: string
    loginHistory: Array<{
      date: string
      ip: string
      device: string
    }>
  }
  preferences: {
    language: string
    currency: string
    theme: 'light' | 'dark' | 'auto'
    newsletter: boolean
  }
  stats: {
    totalOrders: number
    totalSpent: number
    favoriteShops: number
    reviews: number
  }
}

export const UserProfile: React.FC = () => {
  const navigate = useNavigate()
  const [activeTab, setActiveTab] = useState('personal')
  const [isEditing, setIsEditing] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [userData, setUserData] = useState<UserData>({
    id: 'user-123',
    firstName: '–ò–≤–∞–Ω',
    lastName: '–ü–µ—Ç—Ä–æ–≤',
    email: 'ivan.petrov@email.com',
    phone: '+7 (999) 123-45-67',
    birthDate: '1990-05-15',
    gender: 'male',
    avatar: '',
    joinDate: '2024-01-15',
    emailVerified: true,
    phoneVerified: true,
    notifications: {
      email: true,
      sms: false,
      push: true,
      marketing: true
    },
    security: {
      twoFactorEnabled: false,
      lastPasswordChange: '2024-06-20',
      loginHistory: [
        { date: '2025-01-13T12:30:00', ip: '192.168.1.1', device: 'Chrome, Windows' },
        { date: '2025-01-12T18:45:00', ip: '192.168.1.1', device: 'Safari, iPhone' },
        { date: '2025-01-11T09:15:00', ip: '192.168.1.2', device: 'Chrome, Windows' }
      ]
    },
    preferences: {
      language: 'ru',
      currency: 'RUB',
      theme: 'light',
      newsletter: true
    },
    stats: {
      totalOrders: 24,
      totalSpent: 45670,
      favoriteShops: 8,
      reviews: 12
    }
  })

  const [formData, setFormData] = useState(userData)
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })

  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target
    
    if (type === 'checkbox') {
      const checkbox = e.target as HTMLInputElement
      const [section, field] = name.split('.')
      
      if (section && field) {
        setFormData(prev => ({
          ...prev,
          [section]: {
            ...prev[section as keyof UserData],
            [field]: checkbox.checked
          }
        }))
      }
    } else {
      const [section, field] = name.includes('.') ? name.split('.') : [null, name]
      
      if (section && field) {
        setFormData(prev => ({
          ...prev,
          [section]: {
            ...prev[section as keyof UserData],
            [field]: value
          }
        }))
      } else {
        setFormData(prev => ({
          ...prev,
          [name]: value
        }))
      }
    }
  }

  const handleSave = () => {
    // Simulate API call
    setTimeout(() => {
      setUserData(formData)
      setIsEditing(false)
    }, 500)
  }

  const handleCancel = () => {
    setFormData(userData)
    setIsEditing(false)
  }

  const handlePasswordChange = () => {
    // Validate passwords
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
      return
    }
    
    // Simulate API call
    setTimeout(() => {
      setShowPasswordModal(false)
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
      alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
    }, 500)
  }

  const handleDeleteAccount = () => {
    // Simulate account deletion
    setTimeout(() => {
      navigate(ROUTES.HOME)
    }, 500)
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
  }

  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="user-profile-page">
      <div className="profile-header">
        <div className="container">
          <div className="header-content">
            <div className="user-avatar-section">
              <div className="avatar-wrapper">
                {userData.avatar ? (
                  <img src={userData.avatar} alt="Avatar" />
                ) : (
                  <div className="avatar-placeholder">
                    {userData.firstName[0]}{userData.lastName[0]}
                  </div>
                )}
                {isEditing && (
                  <button className="change-avatar-btn">
                    üì∑ –ò–∑–º–µ–Ω–∏—Ç—å
                  </button>
                )}
              </div>
              <div className="user-info">
                <h1>{userData.firstName} {userData.lastName}</h1>
                <p className="user-email">
                  {userData.email}
                  {userData.emailVerified && <span className="verified">‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>}
                </p>
                <p className="member-since">–£—á–∞—Å—Ç–Ω–∏–∫ —Å {formatDate(userData.joinDate)}</p>
              </div>
            </div>
            
            <div className="profile-stats">
              <div className="stat-item">
                <span className="stat-value">{userData.stats.totalOrders}</span>
                <span className="stat-label">–ó–∞–∫–∞–∑–æ–≤</span>
              </div>
              <div className="stat-item">
                <span className="stat-value">{userData.stats.totalSpent.toLocaleString()} ‚ÇΩ</span>
                <span className="stat-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</span>
              </div>
              <div className="stat-item">
                <span className="stat-value">{userData.stats.favoriteShops}</span>
                <span className="stat-label">–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤</span>
              </div>
              <div className="stat-item">
                <span className="stat-value">{userData.stats.reviews}</span>
                <span className="stat-label">–û—Ç–∑—ã–≤–æ–≤</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="profile-content">
          <div className="profile-tabs">
            <button 
              className={activeTab === 'personal' ? 'active' : ''}
              onClick={() => setActiveTab('personal')}
            >
              üë§ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </button>
            <button 
              className={activeTab === 'notifications' ? 'active' : ''}
              onClick={() => setActiveTab('notifications')}
            >
              üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
            <button 
              className={activeTab === 'security' ? 'active' : ''}
              onClick={() => setActiveTab('security')}
            >
              üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            </button>
            <button 
              className={activeTab === 'preferences' ? 'active' : ''}
              onClick={() => setActiveTab('preferences')}
            >
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
          </div>

          <div className="tab-content">
            {activeTab === 'personal' && (
              <div className="personal-tab">
                <div className="section-header">
                  <h2>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                  {!isEditing ? (
                    <button className="edit-btn" onClick={() => setIsEditing(true)}>
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  ) : (
                    <div className="edit-actions">
                      <button className="cancel-btn" onClick={handleCancel}>
                        –û—Ç–º–µ–Ω–∞
                      </button>
                      <button className="save-btn" onClick={handleSave}>
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                      </button>
                    </div>
                  )}
                </div>

                <div className="form-grid">
                  <div className="form-group">
                    <label>–ò–º—è</label>
                    <input
                      type="text"
                      name="firstName"
                      value={formData.firstName}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="form-group">
                    <label>–§–∞–º–∏–ª–∏—è</label>
                    <input
                      type="text"
                      name="lastName"
                      value={formData.lastName}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="form-group">
                    <label>Email</label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                    <input
                      type="tel"
                      name="phone"
                      value={formData.phone}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="form-group">
                    <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                    <input
                      type="date"
                      name="birthDate"
                      value={formData.birthDate}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    />
                  </div>

                  <div className="form-group">
                    <label>–ü–æ–ª</label>
                    <select
                      name="gender"
                      value={formData.gender}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                    >
                      <option value="">–ù–µ —É–∫–∞–∑–∞–Ω</option>
                      <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                      <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                      <option value="other">–î—Ä—É–≥–æ–π</option>
                    </select>
                  </div>
                </div>

                <div className="verification-section">
                  <h3>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
                  <div className="verification-items">
                    <div className="verification-item">
                      <span className={userData.emailVerified ? 'verified' : 'unverified'}>
                        {userData.emailVerified ? '‚úì' : '‚úó'} Email {userData.emailVerified ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                      </span>
                      {!userData.emailVerified && (
                        <button className="verify-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                      )}
                    </div>
                    <div className="verification-item">
                      <span className={userData.phoneVerified ? 'verified' : 'unverified'}>
                        {userData.phoneVerified ? '‚úì' : '‚úó'} –¢–µ–ª–µ—Ñ–æ–Ω {userData.phoneVerified ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                      </span>
                      {!userData.phoneVerified && (
                        <button className="verify-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'notifications' && (
              <div className="notifications-tab">
                <div className="section-header">
                  <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
                </div>

                <div className="notification-settings">
                  <div className="setting-group">
                    <h3>–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                    
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="notifications.email"
                        checked={formData.notifications.email}
                        onChange={handleInputChange}
                      />
                      <span>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                      <small>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö –Ω–∞ email</small>
                    </label>

                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="notifications.sms"
                        checked={formData.notifications.sms}
                        onChange={handleInputChange}
                      />
                      <span>SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                      <small>–ü–æ–ª—É—á–∞—Ç—å SMS –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤</small>
                    </label>

                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="notifications.push"
                        checked={formData.notifications.push}
                        onChange={handleInputChange}
                      />
                      <span>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                      <small>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</small>
                    </label>
                  </div>

                  <div className="setting-group">
                    <h3>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                    
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="notifications.marketing"
                        checked={formData.notifications.marketing}
                        onChange={handleInputChange}
                      />
                      <span>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</span>
                      <small>–ê–∫—Ü–∏–∏, —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</small>
                    </label>
                  </div>

                  <button className="save-settings-btn" onClick={handleSave}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </button>
                </div>
              </div>
            )}

            {activeTab === 'security' && (
              <div className="security-tab">
                <div className="section-header">
                  <h2>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
                </div>

                <div className="security-sections">
                  <div className="security-section">
                    <h3>–ü–∞—Ä–æ–ª—å</h3>
                    <p className="last-changed">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {formatDate(userData.security.lastPasswordChange)}
                    </p>
                    <button 
                      className="change-password-btn"
                      onClick={() => setShowPasswordModal(true)}
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                    </button>
                  </div>

                  <div className="security-section">
                    <h3>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
                    <div className="two-factor-status">
                      <span className={userData.security.twoFactorEnabled ? 'enabled' : 'disabled'}>
                        {userData.security.twoFactorEnabled ? '‚úì –í–∫–ª—é—á–µ–Ω–∞' : '‚úó –û—Ç–∫–ª—é—á–µ–Ω–∞'}
                      </span>
                      <button className="toggle-2fa-btn">
                        {userData.security.twoFactorEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
                      </button>
                    </div>
                  </div>

                  <div className="security-section">
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤</h3>
                    <div className="login-history">
                      {userData.security.loginHistory.map((login, index) => (
                        <div key={index} className="login-item">
                          <div className="login-info">
                            <span className="login-date">{formatDateTime(login.date)}</span>
                            <span className="login-device">{login.device}</span>
                          </div>
                          <span className="login-ip">IP: {login.ip}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="security-section danger-zone">
                    <h3>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                    <p className="warning-text">
                      –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
                    </p>
                    <button 
                      className="delete-account-btn"
                      onClick={() => setShowDeleteModal(true)}
                    >
                      –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    </button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'preferences' && (
              <div className="preferences-tab">
                <div className="section-header">
                  <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
                </div>

                <div className="preferences-form">
                  <div className="form-group">
                    <label>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</label>
                    <select
                      name="preferences.language"
                      value={formData.preferences.language}
                      onChange={handleInputChange}
                    >
                      <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                      <option value="en">English</option>
                      <option value="kz">“ö–∞–∑–∞“õ—à–∞</option>
                    </select>
                  </div>

                  <div className="form-group">
                    <label>–í–∞–ª—é—Ç–∞</label>
                    <select
                      name="preferences.currency"
                      value={formData.preferences.currency}
                      onChange={handleInputChange}
                    >
                      <option value="RUB">‚ÇΩ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å</option>
                      <option value="USD">$ –î–æ–ª–ª–∞—Ä –°–®–ê</option>
                      <option value="EUR">‚Ç¨ –ï–≤—Ä–æ</option>
                      <option value="KZT">‚Ç∏ –¢–µ–Ω–≥–µ</option>
                    </select>
                  </div>

                  <div className="form-group">
                    <label>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</label>
                    <select
                      name="preferences.theme"
                      value={formData.preferences.theme}
                      onChange={handleInputChange}
                    >
                      <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
                      <option value="dark">–¢–µ–º–Ω–∞—è</option>
                      <option value="auto">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</option>
                    </select>
                  </div>

                  <div className="form-group">
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="preferences.newsletter"
                        checked={formData.preferences.newsletter}
                        onChange={handleInputChange}
                      />
                      <span>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É</span>
                      <small>–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞</small>
                    </label>
                  </div>

                  <button className="save-preferences-btn" onClick={handleSave}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Password Change Modal */}
      {showPasswordModal && (
        <div className="modal-overlay" onClick={() => setShowPasswordModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
              <button 
                className="close-btn"
                onClick={() => setShowPasswordModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="modal-body">
              <div className="form-group">
                <label>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  value={passwordData.currentPassword}
                  onChange={e => setPasswordData(prev => ({
                    ...prev,
                    currentPassword: e.target.value
                  }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                />
              </div>

              <div className="form-group">
                <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  value={passwordData.newPassword}
                  onChange={e => setPasswordData(prev => ({
                    ...prev,
                    newPassword: e.target.value
                  }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                />
              </div>

              <div className="form-group">
                <label>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
                <input
                  type="password"
                  value={passwordData.confirmPassword}
                  onChange={e => setPasswordData(prev => ({
                    ...prev,
                    confirmPassword: e.target.value
                  }))}
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                />
              </div>
            </div>

            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowPasswordModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="confirm-btn"
                onClick={handlePasswordChange}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Account Modal */}
      {showDeleteModal && (
        <div className="modal-overlay" onClick={() => setShowDeleteModal(false)}>
          <div className="modal-content delete-modal" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
              <button 
                className="close-btn"
                onClick={() => setShowDeleteModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="modal-body">
              <p className="warning-message">
                ‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?
              </p>
              <p>
                –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ 
                –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.
              </p>
            </div>

            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowDeleteModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="delete-btn"
                onClick={handleDeleteAccount}
              >
                –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}