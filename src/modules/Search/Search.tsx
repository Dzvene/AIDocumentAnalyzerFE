import React, { useState, useEffect } from 'react'
import { Link, useSearchParams } from 'react-router-dom'
import { useDispatch } from 'react-redux'
import { ROUTES } from '@constants/routes'
import { productsApi, shopsApi } from '@api'
import { Product } from '@types/interfaces/product'
import { Shop } from '@types/interfaces/shop'
import { AppDispatch } from '@store/store'
// import { addToCart } from '@store/slices/cartSlice' // TODO: Update to use multiCartSlice
import { useNotification } from '@hooks/useNotification'
import './Search.scss'

export const Search: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>()
  const notification = useNotification()
  
  const [searchParams, setSearchParams] = useSearchParams()
  const [searchQuery, setSearchQuery] = useState(searchParams.get('q') || '')
  const [activeTab, setActiveTab] = useState<'products' | 'shops'>('products')
  const [products, setProducts] = useState<Product[]>([])
  const [shops, setShops] = useState<Shop[]>([])
  const [categories, setCategories] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [filters, setFilters] = useState({
    category: 'all',
    priceRange: 'all',
    inStockOnly: false,
    sortBy: 'relevance'
  })

  useEffect(() => {
    // Load categories on mount
    const loadCategories = async () => {
      try {
        const categoriesData = await productsApi.getCategories()
        setCategories([
          { value: 'all', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
          ...categoriesData.map(cat => ({ value: cat.id.toString(), label: cat.name }))
        ])
      } catch (error) {
        // Fallback categories
        setCategories([
          { value: 'all', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
          { value: '1', label: '–û–≤–æ—â–∏' },
          { value: '2', label: '–§—Ä—É–∫—Ç—ã' },
          { value: '3', label: '–ú–æ–ª–æ—á–Ω—ã–µ' },
          { value: '4', label: '–ú—è—Å–æ' },
          { value: '5', label: '–í—ã–ø–µ—á–∫–∞' },
          { value: '6', label: '–ù–∞–ø–∏—Ç–∫–∏' }
        ])
      }
    }
    loadCategories()
  }, [])

  const priceRanges = [
    { value: 'all', label: '–õ—é–±–∞—è —Ü–µ–Ω–∞' },
    { value: '0-100', label: '–î–æ 100‚ÇΩ' },
    { value: '100-500', label: '100-500‚ÇΩ' },
    { value: '500-1000', label: '500-1000‚ÇΩ' },
    { value: '1000+', label: '–û—Ç 1000‚ÇΩ' }
  ]

  const sortOptions = [
    { value: 'relevance', label: '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏' },
    { value: 'price_asc', label: '–¶–µ–Ω–∞: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' },
    { value: 'price_desc', label: '–¶–µ–Ω–∞: –ø–æ —É–±—ã–≤–∞–Ω–∏—é' },
    { value: 'name', label: '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é' },
    { value: 'rating', label: '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É' }
  ]

  useEffect(() => {
    const query = searchParams.get('q')
    if (query) {
      setSearchQuery(query)
      performSearch(query)
    }
  }, [searchParams])

  const performSearch = async (query: string) => {
    if (!query.trim()) return

    setLoading(true)

    try {
      // Parallel search for products and shops
      const [productsResponse, shopsResponse] = await Promise.all([
        productsApi.searchProducts(query, { page: 1, limit: 20 }),
        shopsApi.searchShops(query)
      ])

      setProducts(productsResponse.data || [])
      setShops(shopsResponse || [])
    } catch (error) {
      notification.apiError(error)
      
      // Use fallback empty arrays if API fails
      setProducts([])
      setShops([])
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      setSearchParams({ q: searchQuery.trim() })
    }
  }

  const handleFilterChange = (filterName: string, value: any) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value
    }))
  }

  const filteredProducts = products.filter(product => {
    const matchesCategory = filters.category === 'all' || product.categoryId?.toString() === filters.category
    const matchesStock = !filters.inStockOnly || product.isAvailable
    
    let matchesPrice = true
    if (filters.priceRange !== 'all') {
      const [min, max] = filters.priceRange.split('-').map(p => parseInt(p.replace('+', '')))
      if (max) {
        matchesPrice = product.price >= min && product.price <= max
      } else {
        matchesPrice = product.price >= min
      }
    }
    
    return matchesCategory && matchesStock && matchesPrice
  })

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (filters.sortBy) {
      case 'price_asc':
        return a.price - b.price
      case 'price_desc':
        return b.price - a.price
      case 'name':
        return a.name.localeCompare(b.name)
      case 'rating':
        return (b.rating || 0) - (a.rating || 0)
      default:
        return 0
    }
  })

  const calculateDiscount = (price: number, oldPrice?: number) => {
    if (!oldPrice) return 0
    return Math.round(((oldPrice - price) / oldPrice) * 100)
  }

  const handleAddToCart = async (product: Product) => {
    // TODO: Update to use multiCartSlice with shop selection
    notification.info('Shopping cart functionality is being updated')
  }

  return (
    <div className="search-page">
      <div className="search-header">
        <div className="container">
          <h1>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤</h1>
          <form className="search-form" onSubmit={handleSearch}>
            <div className="search-input-wrapper">
              <input
                type="text"
                placeholder="–ß—Ç–æ –∏—â–µ—Ç–µ?"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
              <button type="submit" className="search-btn">
                <span>üîç</span>
                –ù–∞–π—Ç–∏
              </button>
            </div>
          </form>
        </div>
      </div>

      <div className="container">
        {searchParams.get('q') && (
          <>
            <div className="search-info">
              <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: <strong>"{searchParams.get('q')}"</strong></p>
            </div>

            <div className="search-tabs">
              <button
                className={`tab-btn ${activeTab === 'products' ? 'active' : ''}`}
                onClick={() => setActiveTab('products')}
              >
                üõí –¢–æ–≤–∞—Ä—ã ({products.length})
              </button>
              <button
                className={`tab-btn ${activeTab === 'shops' ? 'active' : ''}`}
                onClick={() => setActiveTab('shops')}
              >
                üè™ –ú–∞–≥–∞–∑–∏–Ω—ã ({shops.length})
              </button>
            </div>

            <div className="search-content">
              {activeTab === 'products' && (
                <>
                  <div className="search-filters">
                    <div className="filter-group">
                      <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                      <select
                        value={filters.category}
                        onChange={(e) => handleFilterChange('category', e.target.value)}
                      >
                        {categories.map(cat => (
                          <option key={cat.value} value={cat.value}>{cat.label}</option>
                        ))}
                      </select>
                    </div>

                    <div className="filter-group">
                      <label>–¶–µ–Ω–∞:</label>
                      <select
                        value={filters.priceRange}
                        onChange={(e) => handleFilterChange('priceRange', e.target.value)}
                      >
                        {priceRanges.map(range => (
                          <option key={range.value} value={range.value}>{range.label}</option>
                        ))}
                      </select>
                    </div>

                    <div className="filter-group">
                      <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                      <select
                        value={filters.sortBy}
                        onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                      >
                        {sortOptions.map(option => (
                          <option key={option.value} value={option.value}>{option.label}</option>
                        ))}
                      </select>
                    </div>

                    <div className="filter-group">
                      <label className="checkbox-label">
                        <input
                          type="checkbox"
                          checked={filters.inStockOnly}
                          onChange={(e) => handleFilterChange('inStockOnly', e.target.checked)}
                        />
                        –¢–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏
                      </label>
                    </div>
                  </div>

                  {loading ? (
                    <div className="search-loading">
                      <div className="spinner"></div>
                      <p>–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã...</p>
                    </div>
                  ) : (
                    <>
                      <div className="results-info">
                        <p>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <strong>{sortedProducts.length}</strong></p>
                      </div>

                      {sortedProducts.length > 0 ? (
                        <div className="products-grid">
                          {sortedProducts.map(product => (
                            <div key={product.id} className="product-card">
                              <div className="product-image">
                                <img src={product.mainImage} alt={product.name} />
                                {product.oldPrice && (
                                  <span className="discount">-{calculateDiscount(product.price, product.oldPrice)}%</span>
                                )}
                                {!product.isAvailable && (
                                  <div className="out-of-stock">
                                    <span>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</span>
                                  </div>
                                )}
                              </div>
                              <div className="product-info">
                                <h3>{product.name}</h3>
                                <p className="description">{product.description}</p>
                                <div className="shop-info">
                                  <Link to={`/shop/${product.shopId}`} className="shop-link">
                                    üè™ {product.shopName}
                                  </Link>
                                </div>
                                {product.rating && (
                                  <div className="rating">
                                    <span className="star">‚≠ê</span>
                                    <span className="value">{product.rating}</span>
                                    <span className="count">({product.reviewCount})</span>
                                  </div>
                                )}
                                <div className="price-row">
                                  <div className="price">
                                    <span className="current">{product.price}‚ÇΩ</span>
                                    {product.oldPrice && (
                                      <span className="old">{product.oldPrice}‚ÇΩ</span>
                                    )}
                                    <span className="unit">/{product.unit}</span>
                                  </div>
                                </div>
                                <button 
                                  className="add-to-cart"
                                  disabled={!product.isAvailable}
                                  onClick={() => handleAddToCart(product)}
                                >
                                  {product.isAvailable ? '–í –∫–æ—Ä–∑–∏–Ω—É' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="no-results">
                          <span className="icon">üîç</span>
                          <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</p>
                        </div>
                      )}
                    </>
                  )}
                </>
              )}

              {activeTab === 'shops' && (
                <>
                  {loading ? (
                    <div className="search-loading">
                      <div className="spinner"></div>
                      <p>–ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω—ã...</p>
                    </div>
                  ) : (
                    <>
                      <div className="results-info">
                        <p>–ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: <strong>{shops.length}</strong></p>
                      </div>

                      {shops.length > 0 ? (
                        <div className="shops-grid">
                          {shops.map(shop => (
                            <div key={shop.id} className="shop-card">
                              <Link to={`/shop/${shop.slug}`} className="shop-card__image">
                                <img src={shop.image} alt={shop.name} />
                                {shop.deliveryFee === 0 && (
                                  <span className="badge free-delivery">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</span>
                                )}
                              </Link>
                              <div className="shop-card__content">
                                <div className="shop-header">
                                  <h3>
                                    <Link to={`/shop/${shop.slug}`}>{shop.name}</Link>
                                  </h3>
                                  <div className="rating">
                                    <span className="star">‚≠ê</span>
                                    <span className="value">{shop.rating}</span>
                                    <span className="count">({shop.reviewCount})</span>
                                  </div>
                                </div>
                                <p className="description">{shop.description}</p>
                                <div className="tags">
                                  {shop.categories.slice(0, 3).map(cat => (
                                    <span key={cat} className="tag">{cat}</span>
                                  ))}
                                </div>
                                <div className="shop-info">
                                  <div className="info-item">
                                    <span className="icon">üìç</span>
                                    <span className="text">{shop.address}</span>
                                  </div>
                                </div>
                                <div className="shop-footer">
                                  <div className="delivery-info">
                                    <span className="delivery-time">üöö {shop.deliveryTime}</span>
                                    <span className="min-order">–æ—Ç {shop.minOrder}‚ÇΩ</span>
                                  </div>
                                  <Link to={`/shop/${shop.slug}`} className="shop-btn">
                                    –ü–µ—Ä–µ–π—Ç–∏ ‚Üí
                                  </Link>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="no-results">
                          <span className="icon">üè™</span>
                          <h3>–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
                        </div>
                      )}
                    </>
                  )}
                </>
              )}
            </div>
          </>
        )}

        {!searchParams.get('q') && (
          <div className="search-suggestions">
            <div className="suggestions-grid">
              <div className="suggestion-section">
                <h3>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</h3>
                <div className="suggestion-tags">
                  <button onClick={() => setSearchQuery('–º–æ–ª–æ–∫–æ')}>–º–æ–ª–æ–∫–æ</button>
                  <button onClick={() => setSearchQuery('—Ö–ª–µ–±')}>—Ö–ª–µ–±</button>
                  <button onClick={() => setSearchQuery('–º—è—Å–æ')}>–º—è—Å–æ</button>
                  <button onClick={() => setSearchQuery('–æ–≤–æ—â–∏')}>–æ–≤–æ—â–∏</button>
                  <button onClick={() => setSearchQuery('—Ñ—Ä—É–∫—Ç—ã')}>—Ñ—Ä—É–∫—Ç—ã</button>
                </div>
              </div>

              <div className="suggestion-section">
                <h3>üçé –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                <div className="suggestion-tags">
                  <button onClick={() => setSearchQuery('–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')}>–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</button>
                  <button onClick={() => setSearchQuery('–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞')}>–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞</button>
                  <button onClick={() => setSearchQuery('–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞')}>–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞</button>
                  <button onClick={() => setSearchQuery('–û–≤–æ—â–∏')}>–û–≤–æ—â–∏</button>
                </div>
              </div>

              <div className="suggestion-section">
                <h3>üè™ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã</h3>
                <div className="suggestion-tags">
                  <button onClick={() => setSearchQuery('–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∞–≤–∫–∞')}>–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∞–≤–∫–∞</button>
                  <button onClick={() => setSearchQuery('–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞')}>–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞</button>
                  <button onClick={() => setSearchQuery('–ü–µ–∫–∞—Ä–Ω—è')}>–ü–µ–∫–∞—Ä–Ω—è</button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}