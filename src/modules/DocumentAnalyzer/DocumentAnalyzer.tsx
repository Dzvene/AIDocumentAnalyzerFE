import React, { useState, useCallback, useEffect } from 'react'
import { useDropzone } from 'react-dropzone'
import { useNavigate } from 'react-router-dom'
import { useAppSelector } from '../../store/hooks'
import { exportAnalysisToPDF } from './pdfExport'
import './DocumentAnalyzer.scss'
import ErrorNotification from '../../components/ErrorNotification/ErrorNotification'

// –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
const DOCUMENT_TYPES = {
  RENTAL: {
    id: 'rental',
    name: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
    icon: 'üè†',
    checks: [
      { id: 'notice_period', label: '–°—Ä–æ–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', default: true },
      { id: 'penalties', label: '–®—Ç—Ä–∞—Ñ—ã –∏ –ø–µ–Ω–∏', default: true },
      { id: 'special_conditions', label: '–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è', default: true },
      { id: 'termination', label: '–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è', default: true },
      { id: 'deposit', label: '–î–µ–ø–æ–∑–∏—Ç –∏ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç', default: true },
      { id: 'rent_increase', label: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã', default: false },
      { id: 'maintenance', label: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É', default: false },
    ]
  },
  INSURANCE: {
    id: 'insurance',
    name: '–°—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å',
    icon: 'üõ°Ô∏è',
    checks: [
      { id: 'exclusions', label: '–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è', default: true },
      { id: 'deductible', label: '–§—Ä–∞–Ω—à–∏–∑–∞', default: true },
      { id: 'limits', label: '–õ–∏–º–∏—Ç—ã –≤—ã–ø–ª–∞—Ç', default: true },
      { id: 'claim_deadlines', label: '–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π', default: true },
      { id: 'cancellation', label: '–£—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã', default: false },
      { id: 'premium_changes', label: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–º–∏–π', default: false },
      { id: 'waiting_period', label: '–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è', default: false },
    ]
  },
  EMPLOYMENT: {
    id: 'employment', 
    name: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
    icon: 'üíº',
    checks: [
      { id: 'probation', label: '–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫', default: true },
      { id: 'notice_termination', label: '–°—Ä–æ–∫–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è', default: true },
      { id: 'non_compete', label: '–ó–∞–ø—Ä–µ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é', default: true },
      { id: 'confidentiality', label: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', default: true },
      { id: 'overtime', label: '–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', default: false },
      { id: 'benefits', label: '–õ—å–≥–æ—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏', default: false },
      { id: 'intellectual_property', label: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', default: false },
    ]
  },
  PURCHASE: {
    id: 'purchase',
    name: '–î–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
    icon: 'üõí',
    checks: [
      { id: 'warranties', label: '–ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ –∑–∞–≤–µ—Ä–µ–Ω–∏—è', default: true },
      { id: 'return_policy', label: '–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞', default: true },
      { id: 'hidden_fees', label: '–°–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏', default: true },
      { id: 'delivery_terms', label: '–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏', default: true },
      { id: 'payment_terms', label: '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã', default: false },
      { id: 'ownership_transfer', label: '–ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', default: false },
    ]
  },
  LOAN: {
    id: 'loan',
    name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä',
    icon: 'üí∞',
    checks: [
      { id: 'interest_rate', label: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è', default: true },
      { id: 'hidden_commissions', label: '–°–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏', default: true },
      { id: 'early_repayment', label: '–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ', default: true },
      { id: 'default_consequences', label: '–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏', default: true },
      { id: 'collateral', label: '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –∑–∞–ª–æ–≥', default: false },
      { id: 'insurance_requirements', label: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é', default: false },
    ]
  },
  CUSTOM: {
    id: 'custom',
    name: '–î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç',
    icon: 'üìÑ',
    checks: []
  }
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
const calculatePrice = (pages: number): { price: number; discount: number; tier: string } => {
  if (pages <= 10) {
    return { price: pages * 0.99, discount: 0, tier: 'standard' }
  } else if (pages <= 50) {
    return { price: pages * 0.79, discount: 20, tier: 'silver' }
  } else if (pages <= 100) {
    return { price: pages * 0.59, discount: 40, tier: 'gold' }
  } else {
    return { price: pages * 0.39, discount: 60, tier: 'platinum' }
  }
}

const DocumentAnalyzer: React.FC = () => {
  const navigate = useNavigate()
  const { token, isAuthenticated } = useAppSelector((state) => state.auth)
  
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [documentType, setDocumentType] = useState(DOCUMENT_TYPES.RENTAL)
  const [selectedChecks, setSelectedChecks] = useState<Set<string>>(
    new Set(documentType.checks.filter(c => c.default).map(c => c.id))
  )
  const [customPrompt, setCustomPrompt] = useState('')
  const [pageCount, setPageCount] = useState(0)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<any>(null)
  const [dragActive, setDragActive] = useState(false)
  const [isCountingPages, setIsCountingPages] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  // Check authentication on mount
  useEffect(() => {
    if (!isAuthenticated && !token) {
      navigate('/login')
    }
  }, [isAuthenticated, token, navigate])

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0]
      setSelectedFile(file)
      setIsCountingPages(true)
      
      // Get real page count from backend
      try {
        const formData = new FormData()
        formData.append('file', file)
        
        // Use token from Redux store or localStorage as fallback
        const authToken = token || localStorage.getItem('auth_token')
        
        if (!authToken) {
          console.error('No auth token! User should be logged in')
          // Redirect to login
          navigate('/login')
          return
        }
        
        console.log('Sending file to backend for page count...')
        const response = await fetch('http://localhost:5055/api/analysis/count-pages', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`
          },
          body: formData
        })
        
        console.log('Response status:', response.status)
        
        if (response.ok) {
          const data = await response.json()
          console.log('‚úÖ REAL page count from backend:', data.page_count)
          console.log('Full backend response:', data)
          setPageCount(data.page_count)
        } else {
          const errorText = await response.text()
          console.error('‚ùå Backend error:', response.status, errorText)
          // Fallback to rough estimate if API fails
          const estimatedPages = Math.max(1, Math.ceil(file.size / 3000))
          console.log(`Using fallback estimate: ${estimatedPages} pages (file size: ${file.size} bytes)`)
          setPageCount(estimatedPages)
        }
      } catch (error) {
        console.error('‚ùå Network error counting pages:', error)
        // Fallback to rough estimate
        const estimatedPages = Math.ceil(file.size / 3000)
        console.log('Using fallback estimate:', estimatedPages)
        setPageCount(estimatedPages)
      } finally {
        setIsCountingPages(false)
      }
    }
  }, [token, navigate])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
    },
    maxFiles: 1
  })

  const handleDocumentTypeChange = (type: typeof DOCUMENT_TYPES[keyof typeof DOCUMENT_TYPES]) => {
    setDocumentType(type)
    setSelectedChecks(new Set(type.checks.filter(c => c.default).map(c => c.id)))
  }

  const toggleCheck = (checkId: string) => {
    const newChecks = new Set(selectedChecks)
    if (newChecks.has(checkId)) {
      newChecks.delete(checkId)
    } else {
      newChecks.add(checkId)
    }
    setSelectedChecks(newChecks)
  }

  const handleAnalyze = async () => {
    if (!selectedFile) return
    
    setIsAnalyzing(true)
    
    // Prepare analysis request
    const formData = new FormData()
    formData.append('file', selectedFile)
    formData.append('documentType', documentType.id)
    formData.append('checks', JSON.stringify(Array.from(selectedChecks)))
    formData.append('customPrompt', customPrompt)
    
    try {
      // Use token from Redux store or localStorage as fallback  
      const authToken = token || localStorage.getItem('auth_token')
      
      if (!authToken) {
        setError('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')
        setTimeout(() => navigate('/login'), 2000)
        return
      }
      
      // Call API
      const response = await fetch('http://localhost:5055/api/analysis/quick-analyze', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`
        },
        body: formData
      })
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => null)
        const errorMessage = errorData?.detail || `HTTP error! status: ${response.status}`
        
        if (response.status === 503) {
          setError('AI —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.')
        } else {
          setError(errorMessage || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
        }
        
        throw new Error(errorMessage)
      }
      
      const result = await response.json()
      
      if (result.success && result.analysis) {
        // Format REAL risks from the analysis
        const risks = result.analysis.risks || []
        const formattedRisks = risks.map((risk: any) => ({
          level: risk.level,
          text: risk.text || risk.details
        }))
        
        setAnalysisResult({
          risks: formattedRisks.length > 0 ? formattedRisks : [
            { level: 'info', text: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.' }
          ],
          summary: result.analysis.summary,
          pageCount: result.analysis.page_count,
          recommendations: result.analysis.recommendations,
          pricing: result.analysis.pricing
        })
      } else {
        // NO FALLBACK - NO MOCKS
        throw new Error('Invalid response format')
      }
    } catch (error) {
      console.error('Analysis failed:', error)
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsAnalyzing(false)
    }
  }

  const priceInfo = pageCount > 0 ? calculatePrice(pageCount) : null

  return (
    <div className="document-analyzer">
      <div className="analyzer-header">
        <h1>üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å AI</h1>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –º—ã –Ω–∞–π–¥–µ–º –≤—Å–µ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏ –∏ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</p>
      </div>

      {!analysisResult ? (
        <div className="analyzer-workspace">
          {/* Upload Section */}
          <div className="upload-section">
            <div 
              {...getRootProps()} 
              className={`dropzone ${isDragActive ? 'active' : ''} ${selectedFile ? 'has-file' : ''}`}
            >
              <input {...getInputProps()} />
              {selectedFile ? (
                <div className="file-preview">
                  <span className="file-icon">üìÑ</span>
                  <div className="file-info">
                    <p className="file-name">{selectedFile.name}</p>
                    <p className="file-size">{(selectedFile.size / 1024 / 1024).toFixed(2)} MB</p>
                    <p className="page-count">
                      {isCountingPages ? '–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü...' : `${pageCount} —Å—Ç—Ä–∞–Ω–∏—Ü`}
                    </p>
                  </div>
                  <button 
                    className="remove-file"
                    onClick={(e) => {
                      e.stopPropagation()
                      setSelectedFile(null)
                      setPageCount(0)
                      setIsCountingPages(false)
                    }}
                  >
                    ‚úï
                  </button>
                </div>
              ) : (
                <div className="dropzone-content">
                  <span className="upload-icon">‚¨ÜÔ∏è</span>
                  <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                  <p className="formats">PDF, DOC, DOCX ‚Ä¢ –ú–∞–∫—Å. 50MB</p>
                </div>
              )}
            </div>

            {priceInfo && (
              <div className={`price-card tier-${priceInfo.tier}`}>
                <div className="price-header">
                  <span className="pages">{pageCount} —Å—Ç—Ä–∞–Ω–∏—Ü</span>
                  {priceInfo.discount > 0 && (
                    <span className="discount-badge">-{priceInfo.discount}%</span>
                  )}
                </div>
                <div className="price-amount">
                  ‚Ç¨{priceInfo.price.toFixed(2)}
                </div>
                <div className="price-details">
                  {priceInfo.tier === 'standard' && 'üìÑ –î–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü: ‚Ç¨0.99/—Å—Ç—Ä'}
                  {priceInfo.tier === 'silver' && 'üìö 11-50 —Å—Ç—Ä–∞–Ω–∏—Ü: ‚Ç¨0.79/—Å—Ç—Ä'}
                  {priceInfo.tier === 'gold' && 'üìñ 51-100 —Å—Ç—Ä–∞–Ω–∏—Ü: ‚Ç¨0.59/—Å—Ç—Ä'}
                  {priceInfo.tier === 'platinum' && 'üè¢ 100+ —Å—Ç—Ä–∞–Ω–∏—Ü: ‚Ç¨0.39/—Å—Ç—Ä'}
                </div>
              </div>
            )}
          </div>

          {/* Configuration Section */}
          <div className="config-section">
            {/* Document Type Selection */}
            <div className="document-types">
              <h3>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
              <div className="type-grid">
                {Object.values(DOCUMENT_TYPES).map(type => (
                  <button
                    key={type.id}
                    className={`type-card ${documentType.id === type.id ? 'active' : ''}`}
                    onClick={() => handleDocumentTypeChange(type)}
                  >
                    <span className="type-icon">{type.icon}</span>
                    <span className="type-name">{type.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Checks Selection */}
            {documentType.checks.length > 0 && (
              <div className="checks-section">
                <h3>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?</h3>
                <div className="checks-grid">
                  {documentType.checks.map(check => (
                    <label key={check.id} className="check-item">
                      <input
                        type="checkbox"
                        checked={selectedChecks.has(check.id)}
                        onChange={() => toggleCheck(check.id)}
                      />
                      <span className="check-label">{check.label}</span>
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* Custom Prompt */}
            <div className="custom-prompt">
              <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h3>
              <textarea
                value={customPrompt}
                onChange={(e) => setCustomPrompt(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü–∞—Ö..."
                rows={3}
              />
            </div>

            {/* Analyze Button */}
            <button
              className={`analyze-button ${isAnalyzing ? 'analyzing' : ''}`}
              onClick={handleAnalyze}
              disabled={!selectedFile || isAnalyzing}
            >
              {isAnalyzing ? (
                <>
                  <span className="spinner">‚è≥</span>
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...
                </>
              ) : (
                <>
                  <span>üîç</span>
                  –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
                </>
              )}
            </button>
          </div>
        </div>
      ) : (
        <div className="results-section">
          <div className="results-header">
            <h2>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
            <div className="result-actions">
              <button 
                className="export-pdf"
                onClick={() => {
                  const documentTypeName = Object.values(DOCUMENT_TYPES)
                    .find(t => t.id === documentType.id)?.name || '–î–æ–∫—É–º–µ–Ω—Ç'
                  
                  exportAnalysisToPDF({
                    summary: analysisResult.summary,
                    risks: analysisResult.risks,
                    recommendations: analysisResult.recommendations,
                    pageCount: analysisResult.pageCount,
                    documentType: documentTypeName,
                    fileName: selectedFile?.name,
                    analysisDate: new Date(),
                    pricing: analysisResult.pricing
                  })
                }}
              >
                üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç
              </button>
              <button 
                className="new-analysis"
                onClick={() => {
                  setAnalysisResult(null)
                  setSelectedFile(null)
                  setPageCount(0)
                }}
              >
                üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
              </button>
            </div>
          </div>

          <div className="analysis-results">
            <div className="summary-card">
              <h3>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</h3>
              <p>{analysisResult.summary}</p>
            </div>

            <div className="risks-section">
              <h3>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h3>
              {analysisResult.risks.map((risk: any, index: number) => (
                <div key={index} className={`risk-item risk-${risk.level}`}>
                  <span className="risk-indicator">
                    {risk.level === 'high' ? '‚ö†Ô∏è' : risk.level === 'medium' ? '‚ö°' : '‚ÑπÔ∏è'}
                  </span>
                  <p>{risk.text}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Error Notification */}
      {error && (
        <ErrorNotification
          message={error}
          type="error"
          onClose={() => setError(null)}
        />
      )}
    </div>
  )
}

export default DocumentAnalyzer