import React, { useState, useEffect } from 'react'
import { Link, useNavigate, useLocation } from 'react-router-dom'
import { ROUTES } from '@constants/routes'
import './Payment.scss'

interface PaymentMethod {
  id: string
  type: 'card' | 'cash' | 'online'
  name: string
  icon: string
  description: string
  fee?: number
  enabled: boolean
}

interface CardData {
  number: string
  expiry: string
  cvv: string
  holder: string
  saveCard: boolean
}

interface OrderSummary {
  subtotal: number
  discount: number
  deliveryFee: number
  paymentFee?: number
  total: number
  promoCode?: string
  items: number
}

export const Payment: React.FC = () => {
  const navigate = useNavigate()
  const location = useLocation()
  
  const [selectedMethod, setSelectedMethod] = useState<string>('')
  const [cardData, setCardData] = useState<CardData>({
    number: '',
    expiry: '',
    cvv: '',
    holder: '',
    saveCard: false
  })
  const [isProcessing, setIsProcessing] = useState(false)
  const [showCardForm, setShowCardForm] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})
  
  // Mock order summary (would come from checkout/cart state)
  const [orderSummary] = useState<OrderSummary>({
    subtotal: 1250,
    discount: 125,
    deliveryFee: 150,
    total: 1275,
    promoCode: 'SAVE10',
    items: 5
  })

  const paymentMethods: PaymentMethod[] = [
    {
      id: 'card',
      type: 'card',
      name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      icon: 'üí≥',
      description: 'Visa, MasterCard, –ú–ò–†',
      enabled: true
    },
    {
      id: 'yandex',
      type: 'online',
      name: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
      icon: 'üí∞',
      description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª–µ–∫',
      enabled: true
    },
    {
      id: 'sber',
      type: 'online',
      name: '–°–±–µ—Ä–ü—ç–π',
      icon: 'üü¢',
      description: '–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–±–µ—Ä–±–∞–Ω–∫',
      enabled: true
    },
    {
      id: 'qiwi',
      type: 'online',
      name: 'QIWI –ö–æ—à–µ–ª–µ–∫',
      icon: 'ü•ù',
      description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QIWI',
      fee: 15,
      enabled: true
    },
    {
      id: 'cash',
      type: 'cash',
      name: '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
      icon: 'üíµ',
      description: '–û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏',
      enabled: true
    }
  ]

  useEffect(() => {
    window.scrollTo(0, 0)
    
    // Check if we came from checkout
    if (!location.state?.fromCheckout) {
      // Redirect to cart if accessed directly
      navigate(ROUTES.CART)
    }
  }, [location.state, navigate])

  const handleMethodSelect = (methodId: string) => {
    setSelectedMethod(methodId)
    setShowCardForm(methodId === 'card')
    setErrors({})
    
    // Calculate payment fee if applicable
    const method = paymentMethods.find(m => m.id === methodId)
    if (method?.fee) {
      // Update order summary with fee (would be handled by state management)
    }
  }

  const handleCardInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target
    
    let formattedValue = value

    // Format card number
    if (name === 'number') {
      formattedValue = value.replace(/\D/g, '').slice(0, 16)
      formattedValue = formattedValue.replace(/(\d{4})(?=\d)/g, '$1 ')
    }
    
    // Format expiry date
    if (name === 'expiry') {
      formattedValue = value.replace(/\D/g, '').slice(0, 4)
      if (formattedValue.length >= 2) {
        formattedValue = formattedValue.slice(0, 2) + '/' + formattedValue.slice(2)
      }
    }
    
    // Format CVV
    if (name === 'cvv') {
      formattedValue = value.replace(/\D/g, '').slice(0, 3)
    }

    setCardData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : formattedValue
    }))

    // Clear field error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const validateCardData = (): boolean => {
    const newErrors: Record<string, string> = {}

    if (!cardData.number.replace(/\s/g, '')) {
      newErrors.number = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'
    } else if (cardData.number.replace(/\s/g, '').length < 16) {
      newErrors.number = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä'
    }

    if (!cardData.expiry) {
      newErrors.expiry = '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'
    } else if (!/^\d{2}\/\d{2}$/.test(cardData.expiry)) {
      newErrors.expiry = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ú–ú/–ì–ì)'
    }

    if (!cardData.cvv) {
      newErrors.cvv = '–í–≤–µ–¥–∏—Ç–µ CVV –∫–æ–¥'
    } else if (cardData.cvv.length < 3) {
      newErrors.cvv = 'CVV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ü–∏—Ñ—Ä—ã'
    }

    if (!cardData.holder.trim()) {
      newErrors.holder = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handlePayment = async () => {
    if (!selectedMethod) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
      return
    }

    if (selectedMethod === 'card' && !validateCardData()) {
      return
    }

    setIsProcessing(true)

    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Simulate random payment failure (5% chance)
      if (Math.random() < 0.05) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞')
      }

      // Success - redirect to success page
      navigate('/payment/success', {
        state: {
          orderNumber: `ORD-${Date.now()}`,
          amount: orderSummary.total,
          method: paymentMethods.find(m => m.id === selectedMethod)?.name
        }
      })
      
    } catch (error) {
      alert(error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ')
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div className="payment-page">
      <div className="page-header">
        <div className="container">
          <div className="header-content">
            <h1>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h1>
            <nav className="breadcrumb">
              <Link to={ROUTES.HOME}>–ì–ª–∞–≤–Ω–∞—è</Link>
              <span>/</span>
              <Link to={ROUTES.CART}>–ö–æ—Ä–∑–∏–Ω–∞</Link>
              <span>/</span>
              <Link to={ROUTES.CHECKOUT}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</Link>
              <span>/</span>
              <span>–û–ø–ª–∞—Ç–∞</span>
            </nav>
          </div>
          
          <div className="security-notice">
            <span className="security-icon">üîí</span>
            <span>–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º</span>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="payment-content">
          <div className="payment-form-section">
            <div className="payment-methods">
              <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>
              
              <div className="methods-list">
                {paymentMethods.map(method => (
                  <div
                    key={method.id}
                    className={`payment-method ${selectedMethod === method.id ? 'selected' : ''} ${!method.enabled ? 'disabled' : ''}`}
                    onClick={() => method.enabled && handleMethodSelect(method.id)}
                  >
                    <div className="method-content">
                      <div className="method-info">
                        <span className="method-icon">{method.icon}</span>
                        <div className="method-details">
                          <h3>{method.name}</h3>
                          <p>{method.description}</p>
                          {method.fee && (
                            <span className="method-fee">–ö–æ–º–∏—Å—Å–∏—è: {method.fee} ‚ÇΩ</span>
                          )}
                        </div>
                      </div>
                      <div className="method-radio">
                        <div className={`radio-button ${selectedMethod === method.id ? 'checked' : ''}`}>
                          {selectedMethod === method.id && <div className="radio-dot"></div>}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {showCardForm && (
              <div className="card-form">
                <h3>–î–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã</h3>
                
                <div className="form-grid">
                  <div className="form-group full-width">
                    <label htmlFor="cardNumber">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã *</label>
                    <input
                      type="text"
                      id="cardNumber"
                      name="number"
                      value={cardData.number}
                      onChange={handleCardInputChange}
                      placeholder="1234 5678 9012 3456"
                      className={errors.number ? 'error' : ''}
                      maxLength={19}
                    />
                    {errors.number && <span className="field-error">{errors.number}</span>}
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="cardExpiry">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è *</label>
                    <input
                      type="text"
                      id="cardExpiry"
                      name="expiry"
                      value={cardData.expiry}
                      onChange={handleCardInputChange}
                      placeholder="–ú–ú/–ì–ì"
                      className={errors.expiry ? 'error' : ''}
                      maxLength={5}
                    />
                    {errors.expiry && <span className="field-error">{errors.expiry}</span>}
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="cardCvv">CVV *</label>
                    <input
                      type="text"
                      id="cardCvv"
                      name="cvv"
                      value={cardData.cvv}
                      onChange={handleCardInputChange}
                      placeholder="123"
                      className={errors.cvv ? 'error' : ''}
                      maxLength={3}
                    />
                    {errors.cvv && <span className="field-error">{errors.cvv}</span>}
                  </div>
                  
                  <div className="form-group full-width">
                    <label htmlFor="cardHolder">–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã *</label>
                    <input
                      type="text"
                      id="cardHolder"
                      name="holder"
                      value={cardData.holder}
                      onChange={handleCardInputChange}
                      placeholder="IVAN PETROV"
                      className={errors.holder ? 'error' : ''}
                      style={{ textTransform: 'uppercase' }}
                    />
                    {errors.holder && <span className="field-error">{errors.holder}</span>}
                  </div>
                  
                  <div className="form-group full-width">
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        name="saveCard"
                        checked={cardData.saveCard}
                        onChange={handleCardInputChange}
                      />
                      <span className="checkbox-custom"></span>
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
                    </label>
                  </div>
                </div>

                <div className="security-info">
                  <div className="security-badges">
                    <span className="security-badge">üîê SSL</span>
                    <span className="security-badge">‚úÖ PCI DSS</span>
                    <span className="security-badge">üõ°Ô∏è 3D Secure</span>
                  </div>
                  <p>–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.</p>
                </div>
              </div>
            )}

            <div className="payment-actions">
              <Link to={ROUTES.CHECKOUT} className="back-btn">
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
              </Link>
              
              <button
                className="pay-btn"
                onClick={handlePayment}
                disabled={!selectedMethod || isProcessing}
              >
                {isProcessing ? (
                  <>
                    <span className="spinner"></span>
                    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...
                  </>
                ) : (
                  <>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {orderSummary.total.toLocaleString()} ‚ÇΩ</>
                )}
              </button>
            </div>
          </div>

          <div className="order-summary-sidebar">
            <div className="order-summary">
              <h3>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</h3>
              
              <div className="summary-lines">
                <div className="summary-line">
                  <span>–¢–æ–≤–∞—Ä—ã ({orderSummary.items})</span>
                  <span>{orderSummary.subtotal.toLocaleString()} ‚ÇΩ</span>
                </div>
                
                {orderSummary.discount > 0 && (
                  <div className="summary-line discount">
                    <span>–°–∫–∏–¥–∫–∞</span>
                    <span>-{orderSummary.discount.toLocaleString()} ‚ÇΩ</span>
                  </div>
                )}
                
                {orderSummary.promoCode && (
                  <div className="summary-line promo">
                    <span>–ü—Ä–æ–º–æ–∫–æ–¥ {orderSummary.promoCode}</span>
                    <span>–ü—Ä–∏–º–µ–Ω–µ–Ω ‚úì</span>
                  </div>
                )}
                
                <div className="summary-line">
                  <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                  <span>{orderSummary.deliveryFee > 0 ? `${orderSummary.deliveryFee} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                </div>
                
                {orderSummary.paymentFee && (
                  <div className="summary-line">
                    <span>–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–ª–∞—Ç—É</span>
                    <span>{orderSummary.paymentFee} ‚ÇΩ</span>
                  </div>
                )}
                
                <div className="summary-line total">
                  <span><strong>–ö –æ–ø–ª–∞—Ç–µ</strong></span>
                  <span><strong>{orderSummary.total.toLocaleString()} ‚ÇΩ</strong></span>
                </div>
              </div>
            </div>

            <div className="payment-guarantee">
              <h4>–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h4>
              <div className="guarantee-items">
                <div className="guarantee-item">
                  <span className="guarantee-icon">üîí</span>
                  <div>
                    <h5>–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</h5>
                    <p>SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö</p>
                  </div>
                </div>
                
                <div className="guarantee-item">
                  <span className="guarantee-icon">‚Ü©Ô∏è</span>
                  <div>
                    <h5>–õ–µ–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç</h5>
                    <p>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π</p>
                  </div>
                </div>
                
                <div className="guarantee-item">
                  <span className="guarantee-icon">üõ°Ô∏è</span>
                  <div>
                    <h5>–ó–∞—â–∏—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</h5>
                    <p>–ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="help-section">
              <h4>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h4>
              <div className="help-links">
                <Link to={ROUTES.CONTACT_US} className="help-link">
                  üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                </Link>
                <Link to="/faq" className="help-link">
                  ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                </Link>
                <Link to="/payment-info" className="help-link">
                  üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}