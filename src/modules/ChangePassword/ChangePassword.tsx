import React, { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { ROUTES } from '@constants/routes'
import './ChangePassword.scss'

interface FormData {
  currentPassword: string
  newPassword: string
  confirmPassword: string
}

interface FormErrors {
  currentPassword?: string
  newPassword?: string
  confirmPassword?: string
  general?: string
}

export const ChangePassword: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })

  const [errors, setErrors] = useState<FormErrors>({})
  const [isLoading, setIsLoading] = useState(false)
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  })
  const [successMessage, setSuccessMessage] = useState('')
  const [passwordStrength, setPasswordStrength] = useState({
    score: 0,
    feedback: ''
  })

  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const validatePasswordStrength = (password: string) => {
    let score = 0
    let feedback = ''

    if (password.length >= 8) score += 1
    if (/[a-z]/.test(password)) score += 1
    if (/[A-Z]/.test(password)) score += 1
    if (/\d/.test(password)) score += 1
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) score += 1

    switch (score) {
      case 0:
      case 1:
        feedback = '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 2:
        feedback = '–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 3:
        feedback = '–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å'
        break
      case 4:
        feedback = '–°–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        break
      case 5:
        feedback = '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        break
    }

    return { score, feedback }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))

    // Clear specific field error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }))
    }

    // Update password strength for new password
    if (name === 'newPassword') {
      setPasswordStrength(validatePasswordStrength(value))
    }
  }

  const togglePasswordVisibility = (field: 'current' | 'new' | 'confirm') => {
    setShowPasswords(prev => ({
      ...prev,
      [field]: !prev[field]
    }))
  }

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {}

    // Current password validation
    if (!formData.currentPassword) {
      newErrors.currentPassword = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
    }

    // New password validation
    if (!formData.newPassword) {
      newErrors.newPassword = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
    } else if (formData.newPassword.length < 8) {
      newErrors.newPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
    } else if (formData.newPassword === formData.currentPassword) {
      newErrors.newPassword = '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ'
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
    } else if (formData.newPassword !== formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
    }

    // Password strength check
    if (formData.newPassword && passwordStrength.score < 3) {
      newErrors.newPassword = '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setIsLoading(true)
    setSuccessMessage('')

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Simulate random server error (20% chance)
      if (Math.random() < 0.2) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å')
      }

      setSuccessMessage('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
      setFormData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
      setPasswordStrength({ score: 0, feedback: '' })
      
    } catch (error) {
      setErrors({
        general: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è'
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getPasswordStrengthColor = (score: number) => {
    switch (score) {
      case 0:
      case 1: return '#e74c3c'
      case 2: return '#f39c12'
      case 3: return '#f1c40f'
      case 4: return '#27ae60'
      case 5: return '#2ecc71'
      default: return '#bdc3c7'
    }
  }

  const passwordRequirements = [
    { text: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤', met: formData.newPassword.length >= 8 },
    { text: '–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (a-z)', met: /[a-z]/.test(formData.newPassword) },
    { text: '–ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ (A-Z)', met: /[A-Z]/.test(formData.newPassword) },
    { text: '–¶–∏—Ñ—Ä–∞ (0-9)', met: /\d/.test(formData.newPassword) },
    { text: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!@#$...)', met: /[!@#$%^&*(),.?":{}|<>]/.test(formData.newPassword) }
  ]

  return (
    <div className="change-password-page">
      <div className="page-header">
        <div className="container">
          <h1>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h1>
          <nav className="breadcrumb">
            <Link to={ROUTES.HOME}>–ì–ª–∞–≤–Ω–∞—è</Link>
            <span>/</span>
            <Link to={ROUTES.USER_DASHBOARD}>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</Link>
            <span>/</span>
            <span>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</span>
          </nav>
        </div>
      </div>

      <div className="container">
        <div className="change-password-content">
          <div className="form-section">
            <div className="form-header">
              <div className="header-icon">üîê</div>
              <div>
                <h2>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h2>
                <p>–û–±–µ—Å–ø–µ—á—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å</p>
              </div>
            </div>

            {successMessage && (
              <div className="success-message">
                <span className="success-icon">‚úÖ</span>
                {successMessage}
              </div>
            )}

            {errors.general && (
              <div className="error-message">
                <span className="error-icon">‚ùå</span>
                {errors.general}
              </div>
            )}

            <form onSubmit={handleSubmit} className="password-form">
              <div className="form-group">
                <label htmlFor="currentPassword">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å *</label>
                <div className="password-input-wrapper">
                  <input
                    type={showPasswords.current ? 'text' : 'password'}
                    id="currentPassword"
                    name="currentPassword"
                    value={formData.currentPassword}
                    onChange={handleInputChange}
                    className={errors.currentPassword ? 'error' : ''}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => togglePasswordVisibility('current')}
                    tabIndex={-1}
                  >
                    {showPasswords.current ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.currentPassword && (
                  <span className="field-error">{errors.currentPassword}</span>
                )}
                <div className="forgot-password-link">
                  <Link to={ROUTES.FORGOT_PASSWORD}>–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</Link>
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                <div className="password-input-wrapper">
                  <input
                    type={showPasswords.new ? 'text' : 'password'}
                    id="newPassword"
                    name="newPassword"
                    value={formData.newPassword}
                    onChange={handleInputChange}
                    className={errors.newPassword ? 'error' : ''}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => togglePasswordVisibility('new')}
                    tabIndex={-1}
                  >
                    {showPasswords.new ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.newPassword && (
                  <span className="field-error">{errors.newPassword}</span>
                )}
                
                {formData.newPassword && (
                  <div className="password-strength">
                    <div className="strength-bar">
                      <div 
                        className="strength-fill"
                        style={{ 
                          width: `${(passwordStrength.score / 5) * 100}%`,
                          backgroundColor: getPasswordStrengthColor(passwordStrength.score)
                        }}
                      />
                    </div>
                    <span 
                      className="strength-text"
                      style={{ color: getPasswordStrengthColor(passwordStrength.score) }}
                    >
                      {passwordStrength.feedback}
                    </span>
                  </div>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                <div className="password-input-wrapper">
                  <input
                    type={showPasswords.confirm ? 'text' : 'password'}
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    className={errors.confirmPassword ? 'error' : ''}
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => togglePasswordVisibility('confirm')}
                    tabIndex={-1}
                  >
                    {showPasswords.confirm ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.confirmPassword && (
                  <span className="field-error">{errors.confirmPassword}</span>
                )}
                
                {formData.confirmPassword && formData.newPassword === formData.confirmPassword && (
                  <span className="success-text">‚úì –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç</span>
                )}
              </div>

              <div className="form-actions">
                <Link to={ROUTES.USER_PROFILE} className="cancel-btn">
                  –û—Ç–º–µ–Ω–∞
                </Link>
                <button 
                  type="submit" 
                  className="submit-btn"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <span className="spinner"></span>
                      –ò–∑–º–µ–Ω–µ–Ω–∏–µ...
                    </>
                  ) : (
                    'üîê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'
                  )}
                </button>
              </div>
            </form>
          </div>

          <div className="requirements-section">
            <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é</h3>
            <div className="requirements-list">
              {passwordRequirements.map((req, index) => (
                <div 
                  key={index}
                  className={`requirement ${req.met ? 'met' : 'not-met'}`}
                >
                  <span className="requirement-icon">
                    {req.met ? '‚úÖ' : '‚≠ï'}
                  </span>
                  <span className="requirement-text">{req.text}</span>
                </div>
              ))}
            </div>

            <div className="security-tips">
              <h4>üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h4>
              <ul>
                <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞—Ä–æ–ª–µ</li>
                <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤</li>
                <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å (—Ä–∞–∑ –≤ 3-6 –º–µ—Å—è—Ü–µ–≤)</li>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π</li>
              </ul>
            </div>

            <div className="last-change-info">
              <h4>üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
              <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</strong><br />20 –∏—é–Ω—è 2024 –≥.</p>
              <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</strong><br />3 —Ä–∞–∑–∞</p>
            </div>

            <div className="two-factor-promo">
              <div className="promo-content">
                <h4>üõ°Ô∏è –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
                <p>–ü–æ–≤—ã—Å—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–∫–ª—é—á–∏–≤ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é</p>
                <Link to={ROUTES.USER_PROFILE} className="enable-2fa-btn">
                  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}