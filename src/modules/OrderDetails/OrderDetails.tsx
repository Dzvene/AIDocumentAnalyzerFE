import React, { useState, useEffect } from 'react'
import { Link, useParams, useNavigate } from 'react-router-dom'
import { useTranslation } from 'react-i18next'
import { useNotification } from '@hooks/useNotification'
import { ordersApi } from '@api/ordersApi'
import { ROUTES } from '@constants/routes'
import './OrderDetails.scss'

interface OrderItem {
  id: string
  productId: string
  productName: string
  productImage: string
  quantity: number
  price: number
  originalPrice?: number
  discount?: number
  shopId: string
  shopName: string
  unit: string
}

interface Order {
  id: string
  orderNumber: string
  date: string
  status: 'delivered' | 'processing' | 'shipped' | 'cancelled' | 'refunded'
  items: OrderItem[]
  subtotal: number
  discount: number
  deliveryFee: number
  total: number
  paymentMethod: string
  deliveryAddress: {
    name: string
    phone: string
    street: string
    building: string
    apartment?: string
    entrance?: string
    floor?: string
    intercom?: string
    city: string
    region: string
    postalCode: string
    instructions?: string
  }
  trackingNumber?: string
  estimatedDelivery?: string
  actualDelivery?: string
  promoCode?: string
  courierInfo?: {
    name: string
    phone: string
    rating: number
  }
  statusHistory: Array<{
    status: string
    date: string
    description: string
  }>
  refundInfo?: {
    amount: number
    reason: string
    date: string
    method: string
  }
}

export const OrderDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const { t } = useTranslation()
  const notification = useNotification()
  
  const [order, setOrder] = useState<Order | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [showCancelModal, setShowCancelModal] = useState(false)
  const [showRefundModal, setShowRefundModal] = useState(false)
  const [cancelReason, setCancelReason] = useState('')
  const [refundReason, setRefundReason] = useState('')

  const loadOrderDetails = async () => {
    if (!id) return
    
    setLoading(true)
    setError(null)
    
    try {
      // Try to fetch from API first
      const orderData = await ordersApi.getOrderById(id)
      setOrder(orderData)
    } catch (apiError) {
      console.warn('API not available, using mock data:', apiError)
      
      // Fallback to mock data with realistic delay
      setTimeout(() => {
        const mockOrder: Order = {
        id: id || '1',
        orderNumber: `ORD-2025-${String(Math.floor(Math.random() * 999999)).padStart(6, '0')}`,
        date: '2025-01-10T14:30:00',
        status: 'delivered',
        subtotal: 1250,
        discount: 125,
        deliveryFee: 150,
        total: 1275,
        paymentMethod: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ****1234',
        deliveryAddress: {
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          phone: '+7 (999) 123-45-67',
          street: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è',
          building: '123',
          apartment: '45',
          entrance: '2',
          floor: '5',
          intercom: '45',
          city: '–ú–æ—Å–∫–≤–∞',
          region: '–ú–æ—Å–∫–≤–∞',
          postalCode: '123456',
          instructions: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏'
        },
        trackingNumber: 'TRK123456789',
        estimatedDelivery: '2025-01-12T16:00:00',
        actualDelivery: '2025-01-12T15:45:00',
        promoCode: 'SAVE10',
        courierInfo: {
          name: '–ê–ª–µ–∫—Å–µ–π –ö—É—Ä—å–µ—Ä–æ–≤',
          phone: '+7 (999) 876-54-32',
          rating: 4.9
        },
        items: [
          {
            id: '1',
            productId: 'prod-1',
            productName: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —è–±–ª–æ–∫–∏ –ì–æ–ª–¥–µ–Ω',
            productImage: '/images/products/apples.jpg',
            quantity: 2,
            price: 150,
            originalPrice: 170,
            discount: 12,
            shopId: 'shop-1',
            shopName: '–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∞–≤–∫–∞',
            unit: '–∫–≥'
          },
          {
            id: '2',
            productId: 'prod-2',
            productName: '–ú–æ–ª–æ–∫–æ —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–µ 3.2%',
            productImage: '/images/products/milk.jpg',
            quantity: 3,
            price: 90,
            shopId: 'shop-1',
            shopName: '–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∞–≤–∫–∞',
            unit: '–ª'
          },
          {
            id: '3',
            productId: 'prod-3',
            productName: '–•–ª–µ–± —Ä–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π –Ω–∞ –∑–∞–∫–≤–∞—Å–∫–µ',
            productImage: '/images/products/bread.jpg',
            quantity: 1,
            price: 120,
            originalPrice: 140,
            discount: 14,
            shopId: 'shop-2',
            shopName: '–ü–µ–∫–∞—Ä–Ω—è "–¢—Ä–∞–¥–∏—Ü–∏—è"',
            unit: '—à—Ç'
          }
        ],
        statusHistory: [
          {
            status: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω',
            date: '2025-01-10T14:30:00',
            description: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'
          },
          {
            status: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            date: '2025-01-10T15:15:00',
            description: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω–æ–º –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ'
          },
          {
            status: '–í –ø—É—Ç–∏',
            date: '2025-01-12T10:30:00',
            description: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–∏'
          },
          {
            status: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            date: '2025-01-12T15:45:00',
            description: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—é'
          }
        ]
        }
        
        setOrder(mockOrder)
        notification.info(t('errors.apiNotAvailable', 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ'))
      }, 1000)
    } finally {
      setLoading(false)
    }
  }

  const retryLoadOrder = () => {
    loadOrderDetails()
  }

  const createNewOrder = () => {
    navigate(ROUTES.VENDORS)
  }

  useEffect(() => {
    window.scrollTo(0, 0)
    loadOrderDetails()
  }, [id])

  const getStatusBadge = (status: Order['status']) => {
    const statusConfig = {
      delivered: { label: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', className: 'status-delivered', icon: '‚úÖ' },
      processing: { label: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', className: 'status-processing', icon: '‚è≥' },
      shipped: { label: '–í –ø—É—Ç–∏', className: 'status-shipped', icon: 'üöö' },
      cancelled: { label: '–û—Ç–º–µ–Ω–µ–Ω', className: 'status-cancelled', icon: '‚ùå' },
      refunded: { label: '–í–æ–∑–≤—Ä–∞—Ç', className: 'status-refunded', icon: 'üí∞' }
    }
    
    const config = statusConfig[status]
    return (
      <span className={`status-badge ${config.className}`}>
        <span className="status-icon">{config.icon}</span>
        {config.label}
      </span>
    )
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
  }

  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const handleCancelOrder = () => {
    if (!cancelReason.trim()) {
      alert('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞')
      return
    }
    
    // Simulate API call
    setTimeout(() => {
      if (order) {
        setOrder({
          ...order,
          status: 'cancelled'
        })
      }
      setShowCancelModal(false)
      setCancelReason('')
      alert('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
    }, 500)
  }

  const handleRefundRequest = () => {
    if (!refundReason.trim()) {
      alert('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }
    
    // Simulate API call
    setTimeout(() => {
      setShowRefundModal(false)
      setRefundReason('')
      alert('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–∞–Ω–∞')
    }, 500)
  }

  const handleReorder = () => {
    // Simulate adding items to cart
    alert('–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')
    navigate(ROUTES.CART)
  }

  const handleTrackOrder = () => {
    if (order?.trackingNumber) {
      // Simulate tracking
      alert(`–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${order.trackingNumber}`)
    }
  }

  const handleDownloadInvoice = () => {
    // Simulate invoice download
    alert('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞...')
  }

  const handleContactSupport = () => {
    navigate(ROUTES.CONTACT_US)
  }

  if (loading) {
    return (
      <div className="order-details-loading">
        <div className="container">
          <div className="loading-content">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error && !order) {
    return (
      <div className="order-details-page">
        <div className="page-header">
          <div className="container">
            <h1>{t('orders.orderDetails', '–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞')}</h1>
          </div>
        </div>
        <div className="container">
          <div className="error-state">
            <div className="error-icon">‚ö†Ô∏è</div>
            <h3>{t('orders.failedToFetch', 'Failed to fetch order')}</h3>
            <p>{error}</p>
            <div className="error-actions">
              <button 
                className="retry-btn"
                onClick={retryLoadOrder}
              >
                {t('common.retry', '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å')}
              </button>
              <button 
                className="create-order-btn primary"
                onClick={createNewOrder}
              >
                {t('orders.createNew', 'Create New Order')}
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!order) {
    return (
      <div className="order-not-found">
        <div className="container">
          <div className="not-found-content">
            <span className="icon">üì¶</span>
            <h2>{t('orders.notFound', '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')}</h2>
            <p>{t('orders.notFoundDescription', '–ó–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω')}</p>
            <Link to={ROUTES.USER_ORDERS} className="back-btn">
              ‚Üê {t('orders.backToOrders', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º')}
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="order-details-page">
      <div className="page-header">
        <div className="container">
          <div className="header-content">
            <div className="header-main">
              <h1>–ó–∞–∫–∞–∑ {order.orderNumber}</h1>
              <nav className="breadcrumb">
                <Link to={ROUTES.HOME}>–ì–ª–∞–≤–Ω–∞—è</Link>
                <span>/</span>
                <Link to={ROUTES.USER_DASHBOARD}>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</Link>
                <span>/</span>
                <Link to={ROUTES.USER_ORDERS}>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</Link>
                <span>/</span>
                <span>{order.orderNumber}</span>
              </nav>
            </div>
            
            <div className="header-status">
              {getStatusBadge(order.status)}
              <span className="order-date">
                {formatDate(order.date)}
              </span>
            </div>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="order-details-content">
          <div className="main-content">
            {/* Order Status Timeline */}
            <div className="status-timeline">
              <h2>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</h2>
              <div className="timeline">
                {order.statusHistory.map((item, index) => (
                  <div key={index} className="timeline-item">
                    <div className="timeline-marker"></div>
                    <div className="timeline-content">
                      <h4>{item.status}</h4>
                      <p className="timeline-date">{formatDateTime(item.date)}</p>
                      <p className="timeline-description">{item.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Order Items */}
            <div className="order-items-section">
              <h2>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ ({order.items.length})</h2>
              <div className="items-by-shop">
                {Object.entries(
                  order.items.reduce((groups, item) => {
                    if (!groups[item.shopId]) {
                      groups[item.shopId] = {
                        shopName: item.shopName,
                        items: []
                      }
                    }
                    groups[item.shopId].items.push(item)
                    return groups
                  }, {} as Record<string, { shopName: string, items: OrderItem[] }>)
                ).map(([shopId, group]) => (
                  <div key={shopId} className="shop-group">
                    <div className="shop-header">
                      <h3>
                        <Link to={`/shop/${shopId}`} className="shop-link">
                          üè™ {group.shopName}
                        </Link>
                      </h3>
                    </div>
                    
                    <div className="shop-items">
                      {group.items.map(item => (
                        <div key={item.id} className="order-item">
                          <Link to={`/product/${item.productId}`} className="item-image">
                            <img src={item.productImage} alt={item.productName} />
                            {item.discount && (
                              <span className="discount-badge">-{item.discount}%</span>
                            )}
                          </Link>
                          
                          <div className="item-details">
                            <Link 
                              to={`/product/${item.productId}`}
                              className="item-name"
                            >
                              {item.productName}
                            </Link>
                            <div className="item-price-info">
                              <span className="current-price">
                                {item.price} ‚ÇΩ/{item.unit}
                              </span>
                              {item.originalPrice && (
                                <span className="original-price">
                                  {item.originalPrice} ‚ÇΩ/{item.unit}
                                </span>
                              )}
                            </div>
                            <div className="item-quantity">
                              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} {item.unit}
                            </div>
                          </div>
                          
                          <div className="item-total">
                            <span className="total-price">
                              {(item.price * item.quantity).toLocaleString()} ‚ÇΩ
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Delivery Information */}
            <div className="delivery-section">
              <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</h2>
              <div className="delivery-grid">
                <div className="delivery-address">
                  <h3>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                  <div className="address-card">
                    <p className="recipient">{order.deliveryAddress.name}</p>
                    <p className="phone">{order.deliveryAddress.phone}</p>
                    <p className="address">
                      {order.deliveryAddress.postalCode}, {order.deliveryAddress.region}, {order.deliveryAddress.city}
                    </p>
                    <p className="street">
                      {order.deliveryAddress.street}, –¥. {order.deliveryAddress.building}
                      {order.deliveryAddress.apartment && `, –∫–≤. ${order.deliveryAddress.apartment}`}
                    </p>
                    {(order.deliveryAddress.entrance || order.deliveryAddress.floor || order.deliveryAddress.intercom) && (
                      <p className="additional">
                        {order.deliveryAddress.entrance && `–ü–æ–¥—ä–µ–∑–¥ ${order.deliveryAddress.entrance}`}
                        {order.deliveryAddress.floor && `, —ç—Ç–∞–∂ ${order.deliveryAddress.floor}`}
                        {order.deliveryAddress.intercom && `, –¥–æ–º–æ—Ñ–æ–Ω ${order.deliveryAddress.intercom}`}
                      </p>
                    )}
                    {order.deliveryAddress.instructions && (
                      <p className="instructions">
                        üí¨ {order.deliveryAddress.instructions}
                      </p>
                    )}
                  </div>
                </div>
                
                {order.courierInfo && (
                  <div className="courier-info">
                    <h3>–ö—É—Ä—å–µ—Ä</h3>
                    <div className="courier-card">
                      <div className="courier-avatar">üë®‚Äçüöö</div>
                      <div className="courier-details">
                        <p className="courier-name">{order.courierInfo.name}</p>
                        <p className="courier-phone">{order.courierInfo.phone}</p>
                        <div className="courier-rating">
                          <span className="rating">‚≠ê {order.courierInfo.rating}</span>
                          <span className="rating-label">—Ä–µ–π—Ç–∏–Ω–≥</span>
                        </div>
                      </div>
                      <button className="call-courier-btn">üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
                    </div>
                  </div>
                )}
                
                {order.trackingNumber && (
                  <div className="tracking-info">
                    <h3>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</h3>
                    <div className="tracking-card">
                      <p className="tracking-number">
                        <strong>–ù–æ–º–µ—Ä:</strong> {order.trackingNumber}
                      </p>
                      {order.estimatedDelivery && (
                        <p className="estimated-delivery">
                          <strong>–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</strong><br />
                          {formatDateTime(order.estimatedDelivery)}
                        </p>
                      )}
                      {order.actualDelivery && (
                        <p className="actual-delivery">
                          <strong>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</strong><br />
                          {formatDateTime(order.actualDelivery)}
                        </p>
                      )}
                      <button 
                        className="track-btn"
                        onClick={handleTrackOrder}
                      >
                        üìç –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className="sidebar">
            {/* Order Summary */}
            <div className="order-summary">
              <h3>–°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É</h3>
              <div className="summary-lines">
                <div className="summary-line">
                  <span>–¢–æ–≤–∞—Ä—ã ({order.items.length})</span>
                  <span>{order.subtotal.toLocaleString()} ‚ÇΩ</span>
                </div>
                {order.discount > 0 && (
                  <div className="summary-line discount">
                    <span>–°–∫–∏–¥–∫–∞</span>
                    <span>-{order.discount.toLocaleString()} ‚ÇΩ</span>
                  </div>
                )}
                {order.promoCode && (
                  <div className="summary-line promo">
                    <span>–ü—Ä–æ–º–æ–∫–æ–¥ {order.promoCode}</span>
                    <span>–ü—Ä–∏–º–µ–Ω–µ–Ω ‚úì</span>
                  </div>
                )}
                <div className="summary-line">
                  <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                  <span>{order.deliveryFee > 0 ? `${order.deliveryFee} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                </div>
                <div className="summary-line total">
                  <span><strong>–ò—Ç–æ–≥–æ</strong></span>
                  <span><strong>{order.total.toLocaleString()} ‚ÇΩ</strong></span>
                </div>
              </div>
              
              <div className="payment-method">
                <p><strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong></p>
                <p>{order.paymentMethod}</p>
              </div>
            </div>

            {/* Order Actions */}
            <div className="order-actions">
              <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="actions-list">
                {order.status === 'delivered' && (
                  <>
                    <button 
                      className="action-btn reorder-btn"
                      onClick={handleReorder}
                    >
                      üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                    <button 
                      className="action-btn refund-btn"
                      onClick={() => setShowRefundModal(true)}
                    >
                      üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç
                    </button>
                    <Link 
                      to="/order/review"
                      className="action-btn review-btn"
                    >
                      ‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                    </Link>
                  </>
                )}
                
                {['processing', 'shipped'].includes(order.status) && (
                  <button 
                    className="action-btn cancel-btn"
                    onClick={() => setShowCancelModal(true)}
                  >
                    ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                  </button>
                )}
                
                <button 
                  className="action-btn invoice-btn"
                  onClick={handleDownloadInvoice}
                >
                  üìÑ –°–∫–∞—á–∞—Ç—å —Å—á–µ—Ç
                </button>
                
                <button 
                  className="action-btn support-btn"
                  onClick={handleContactSupport}
                >
                  üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                </button>
              </div>
            </div>

            {/* Refund Information */}
            {order.refundInfo && (
              <div className="refund-info">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ</h3>
                <div className="refund-details">
                  <p><strong>–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</strong> {order.refundInfo.amount} ‚ÇΩ</p>
                  <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {order.refundInfo.reason}</p>
                  <p><strong>–î–∞—Ç–∞:</strong> {formatDate(order.refundInfo.date)}</p>
                  <p><strong>–°–ø–æ—Å–æ–±:</strong> {order.refundInfo.method}</p>
                </div>
              </div>
            )}

            {/* Help Section */}
            <div className="help-section">
              <h3>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h3>
              <div className="help-links">
                <Link to="/faq" className="help-link">
                  ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                </Link>
                <Link to="/delivery-info" className="help-link">
                  üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                </Link>
                <Link to="/return-policy" className="help-link">
                  ‚Ü©Ô∏è –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Cancel Order Modal */}
      {showCancelModal && (
        <div className="modal-overlay" onClick={() => setShowCancelModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</h2>
              <button 
                className="close-btn"
                onClick={() => setShowCancelModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="modal-body">
              <p className="warning-message">
                ‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?
              </p>
              <div className="form-group">
                <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã *</label>
                <textarea
                  value={cancelReason}
                  onChange={(e) => setCancelReason(e.target.value)}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"
                  rows={4}
                />
              </div>
              <p className="note">
                –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
              </p>
            </div>

            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowCancelModal(false)}
              >
                –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å
              </button>
              <button 
                className="confirm-btn"
                onClick={handleCancelOrder}
              >
                –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Refund Request Modal */}
      {showRefundModal && (
        <div className="modal-overlay" onClick={() => setShowRefundModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞</h2>
              <button 
                className="close-btn"
                onClick={() => setShowRefundModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="modal-body">
              <p>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:</p>
              <div className="form-group">
                <label>–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ *</label>
                <textarea
                  value={refundReason}
                  onChange={(e) => setRefundReason(e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞"
                  rows={4}
                />
              </div>
              <p className="note">
                –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è 
                –≤–æ–∑–≤—Ä–∞—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 7-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
              </p>
            </div>

            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowRefundModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="confirm-btn"
                onClick={handleRefundRequest}
              >
                –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}